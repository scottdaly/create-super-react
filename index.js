#!/usr/bin/env node
import { execSync } from "node:child_process";
import fs from "node:fs/promises";
import path from "node:path";

const run = (cmd, opts = {}) => execSync(cmd, { stdio: "inherit", ...opts });
const log = (msg = "") => console.log(msg);

// --- helpers ---------------------------------------------------------------

async function ensureTool(cmd, versionArg = "--version", hint = "") {
  try {
    execSync(`${cmd} ${versionArg}`, { stdio: "ignore" });
  } catch {
    console.error(`❌ Missing tool: ${cmd}. ${hint}`);
    process.exit(1);
  }
}

async function exists(p) {
  try {
    await fs.access(p);
    return true;
  } catch {
    return false;
  }
}

async function dirIsEmpty(dir) {
  try {
    const entries = await fs.readdir(dir);
    return entries.length === 0;
  } catch {
    return true; // treat non-existent as empty
  }
}

async function findFile(dir, names) {
  for (const n of names) {
    const full = path.join(dir, n);
    if (await exists(full)) return full;
  }
  return null;
}

/**
 * Injects Tailwind's Vite plugin import and ensures tailwindcss() is present in the plugins array.
 * Works for vite.config.(ts|js|mts|mjs).
 */
function addTailwindToViteConfig(src) {
  let out = src;

  // Add import if missing
  if (!/['"]@tailwindcss\/vite['"]/.test(out)) {
    out = `import tailwindcss from '@tailwindcss/vite'\n` + out;
  }

  // If a plugins array exists, append tailwindcss() if missing
  const pluginsRe = /plugins\s*:\s*\[([\s\S]*?)\]/m;
  if (pluginsRe.test(out)) {
    if (!/tailwindcss\(\)/.test(out)) {
      out = out.replace(pluginsRe, (m, inner) => {
        const trimmed = inner.trim();
        return `plugins: [${trimmed ? trimmed + ", " : ""}tailwindcss()]`;
      });
    }
    return out;
  }

  // Otherwise, try to insert a plugins array inside defineConfig({ ... })
  const defineRe = /defineConfig\(\s*\{([\s\S]*?)\}\s*\)/m;
  if (defineRe.test(out)) {
    out = out.replace(defineRe, (m, inner) => {
      // Insert plugins near the top of the object if it doesn't already exist
      return `defineConfig({\n  plugins: [tailwindcss()],\n${inner}\n})`;
    });
    // Ensure we didn't accidentally duplicate plugins
    const multiPlugins = out.match(/plugins\s*:/g) || [];
    if (multiPlugins.length > 1) {
      // fallback: keep first occurrence, remove the one we injected (edge templates)
      out = src; // revert and fall back below
    } else {
      return out;
    }
  }

  // Last resort: append a minimal export with tailwind (rare templates)
  if (!/defineConfig/.test(out)) {
    out = `import { defineConfig } from 'vite'\n` + out;
  }
  out += `\n// Added by create-super-react\nexport default defineConfig({ plugins: [tailwindcss()] })\n`;
  return out;
}

async function prependIfMissing(filePath, snippet, containsPattern) {
  const has = await exists(filePath);
  let current = has ? await fs.readFile(filePath, "utf8") : "";
  if (!current.includes(containsPattern)) {
    current = snippet + current;
    await fs.mkdir(path.dirname(filePath), { recursive: true });
    await fs.writeFile(filePath, current);
  }
}

async function writeClaudeMd(root) {
  const content = `# CLAUDE.md

## Purpose
This project is generated by **create-super-react**. It scaffolds a two-folder full‑stack app.

## Structure

\`\`\`
${path.basename(root)}/
  frontend/  → Vite + React + TypeScript + Tailwind CSS v4
  backend/   → Bun + Hono + SQLite (bun:sqlite)
\`\`\`

### Frontend
- Vite React TS template
- Tailwind v4 enabled via \`@tailwindcss/vite\` and \`@import "tailwindcss"\` in \`src/index.css\`.

### Backend
- Bun runtime with Hono
- SQLite database at \`backend/data.sqlite\`
- Initial Routes:
  - \`GET /api/health\` → \`{ ok: true }\`
  - \`GET /api/todos\` → list todos
  - \`POST /api/todos\` → insert \`{ title }\`

### Dev
- API: \`cd backend && bun run dev\` (http://localhost:3000)
- Web: \`cd frontend && npm run dev\` (http://localhost:5173)
`;
  await fs.writeFile(path.join(root, "CLAUDE.md"), content);
}

// --- main ------------------------------------------------------------------

async function main() {
  const [, , appNameArg, ...rest] = process.argv;
  const appName = appNameArg || "my-app";
  const force = rest.includes("--force");

  // Node version check
  const major = parseInt(process.versions.node.split(".")[0], 10);
  if (Number.isFinite(major) && major < 18) {
    console.error(`❌ Node ${process.version} detected. Please use Node >= 18.`);
    process.exit(1);
  }

  await ensureTool("bun", "--version", "Install Bun: https://bun.sh");

  const root = path.resolve(process.cwd(), appName);
  const frontend = path.join(root, "frontend");
  const backend = path.join(root, "backend");

  // Guard against clobbering a non-empty directory unless --force
  if (await exists(root) && !(await dirIsEmpty(root)) && !force) {
    console.error(`❌ Target directory "${root}" is not empty. Use --force to scaffold anyway.`);
    process.exit(1);
  }
  await fs.mkdir(root, { recursive: true });

  // --- FRONTEND ------------------------------------------------------------
  log("📦 Scaffolding frontend with Vite (React + TS)...");
  run(`npm create vite@latest frontend -- --template react-ts`, { cwd: root });

  log("🔧 Installing Tailwind v4 + Vite plugin in frontend...");
  run(`npm i -D tailwindcss @tailwindcss/vite`, { cwd: frontend });

  // Patch Vite config to include Tailwind plugin
  const viteCfgPath = await findFile(frontend, [
    "vite.config.ts",
    "vite.config.js",
    "vite.config.mts",
    "vite.config.mjs",
  ]);
  if (viteCfgPath) {
    const original = await fs.readFile(viteCfgPath, "utf8");
    const updated = addTailwindToViteConfig(original);
    if (updated !== original) {
      await fs.writeFile(viteCfgPath, updated);
    }
  } else {
    log("⚠️  Could not find a Vite config to patch with Tailwind. Please add the plugin manually.");
  }

  // Ensure Tailwind is imported in CSS (prepend without nuking defaults)
  const cssCandidates = ["src/index.css", "src/main.css", "src/style.css"];
  let cssPath = null;
  for (const c of cssCandidates) {
    const full = path.join(frontend, c);
    if (await exists(full)) {
      cssPath = full;
      break;
    }
  }
  if (!cssPath) {
    cssPath = path.join(frontend, "src", "index.css");
  }
  await prependIfMissing(cssPath, `@import "tailwindcss";\n`, '@import "tailwindcss"');

  // --- BACKEND -------------------------------------------------------------
  log("📦 Scaffolding backend with Bun + Hono...");
  run(`bun create hono@latest backend -- --template bun --install --pm bun`, { cwd: root });

  // Replace/seed backend src/index.ts with Hono + SQLite example
  const backendIndex = `
import { Hono } from 'hono'
import { cors } from 'hono/cors'
import { Database } from 'bun:sqlite'

const app = new Hono()
app.use('*', cors())

// Create/open SQLite database file in project root of backend
const db = new Database('data.sqlite')
db.run('CREATE TABLE IF NOT EXISTS todos (id INTEGER PRIMARY KEY AUTOINCREMENT, title TEXT NOT NULL, done INTEGER NOT NULL DEFAULT 0)')

app.get('/api/health', (c) => c.json({ ok: true }))

app.get('/api/todos', (c) => {
  const rows = db.query('SELECT id, title, done FROM todos ORDER BY id DESC').all()
  return c.json(rows)
})

app.post('/api/todos', async (c) => {
  const body = await c.req.json().catch(() => null)
  const title = body?.title?.toString().trim()
  if (!title) return c.json({ error: 'title required' }, 400)
  db.query('INSERT INTO todos (title, done) VALUES (?, 0)').run(title)
  return c.json({ ok: true }, 201)
})

export default app
`.trimStart();

  await fs.writeFile(path.join(backend, "src", "index.ts"), backendIndex);
  // Ignore DB file in git
  try {
    await fs.appendFile(path.join(backend, ".gitignore"), `\n# SQLite database\n/data.sqlite\n`);
  } catch {
    // ignore
  }

  // --- Project metadata ----------------------------------------------------
  await writeClaudeMd(root);

  // --- Done ---------------------------------------------------------------
  log("\n✅ Done!");
  log(`\nNext steps:`);
  log(`  cd ${appName}`);
  log(`  # API`);
  log(`  cd backend && bun run dev    # http://localhost:3000`);
  log(`  # Web (new terminal)`);
  log(`  cd ${appName}/frontend && npm run dev   # http://localhost:5173`);
  log("");
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
});
